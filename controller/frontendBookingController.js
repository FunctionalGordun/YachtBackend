// const BookingEvent = require('../models/BookingEvent');
// const BookingCustomer = require('../models/BookingCustomer');
// const Room = require('../models/Room');
// const { GetFreeRooms } = require('../utils/getFreeRooms/getFreeRooms');
// const { YooCheckout, ICapturePayment } = require('@a2seven/yoo-checkout');
// const checkout = new YooCheckout({ shopId: process.env.SHOP_ID, secretKey: process.env.SECRET_KEY });
// const nodemailer = require('nodemailer');
// const telegramBot = require('node-telegram-bot-api');

// const token = process.env.BOT_TOKEN;

// const bot = new telegramBot (token, {polling:true});

// const DeliveryTitles = {
// 	both: '–¥–æ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –∏ –æ–±—Ä–∞—Ç–Ω–æ',
// 	in: '–¥–æ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã',
// 	out: '–∏–∑ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –¥–æ –¥–æ–º–∞',
// };

// const PetSizes = {
// 	small: '–ú–∞–ª–µ–Ω—å–∫–∞—è –¥–æ 5–∫–≥',
// 	medium: '–°—Ä–µ–¥–Ω—è—è –æ—Ç 5 –¥–æ 15–∫–≥',
// 	big: '–ö—Ä—É–ø–Ω–∞—è –æ—Ç 15–∫–≥ –¥–æ 20–∫–≥',
// 	biggest: '–ë–æ–ª—å—à–∞—è –æ—Ç 20–∫–≥ –∏ –±–æ–ª—å—à–µ',
//   cat: '–ö–æ—Ç'
// }

// const PetSex = {
//   male: '–ú–∞–ª—å—á–∏–∫',
//   female: '–î–µ–≤–æ—á–∫–∞',
// }

// const getServices = (services, petId) => {
//   if (!services) return null;
//   const output = []

//   services.map(serv => {
//     if (serv.petId === petId) {
//       const service = {
//         id: String(serv.serviceId),
//         typeId: String(serv.serviceTypeId),
//         status: false,
//         amount: serv.amount,
//       }
//       output.push(service);
//     }
//   })
//   return output;
// }

// const getUser = async (user) => {
//   if (!user) return null;

//   const { phone, email } = user;
//   const bookingCustomers = phone ? await BookingCustomer.find({$or:[{phone},{email}]}) : null;
//   if (bookingCustomers && bookingCustomers.length !== 0) {
//     const existingCustomer = bookingCustomers[0];
//     existingCustomer.petArr = user.petArr;
//     await existingCustomer.save();
//     return existingCustomer;
//   } else {
//     const newBookingCustomer = new BookingCustomer(user);
//     await newBookingCustomer.save();
//     return newBookingCustomer;
//   }
// }

// const getFreeRooms = async (start, end) => {
//   const rooms = await Room.find({}).sort({ _id: -1 });
//   const bookingEvents = await BookingEvent.find({}).sort({ _id: -1 });
//   const freeRooms = GetFreeRooms(rooms, bookingEvents, start, end);
//   return freeRooms;
// };

// const sortRooms = (avaliableRooms) => {
//   if (!avaliableRooms) return null
//   const output = {
//     comfort: [],
//     family: []
//   }
//   avaliableRooms.map(room => {
//     if (room.roomtype === 'comfort')
//       output.comfort.push(String(room._id));
//     else
//       output.family.push(String(room._id));
//   })
//   return output;
// }

// const getAvaliableRoomId = (avaliableRooms, roomId) => {
//   const tmp = avaliableRooms.filter(el => el !== roomId);
//   return tmp[0];
// }

// const getAvaliableRoom = async (rooms, start, end) => {
//   const avaliableRooms = await getFreeRooms(start, end);
//   let sortedRooms = sortRooms(avaliableRooms);

//   const output = rooms.map(room => {
//     if (sortedRooms[room.roomType].length === 0) throw new Error('full')
//     const roomOk = sortedRooms[room.roomType].includes(room.roomId);

//     if (!roomOk) {
//      const newRoomId = getAvaliableRoomId(sortedRooms[room.roomType], room.roomId);
//       sortedRooms[room.roomType] = sortedRooms[room.roomType].filter(el => el !== newRoomId);
//       room.roomId = newRoomId;
//     }
//     room.roomName = avaliableRooms.find(el => el._id == room.roomId)?.name;
//     return room;
//   })

//   return output;
// }


// const addFrontendBookingEvent = async (req, res) => {
//   try {
//     const {
//       user,
//       rooms,
//       services,
//       start,
//       end,
//       comment,
//       transfer,
//       paymentMethod,
//       paidStatus,
//       totalPrice,
//       paidPrice,
//       discount,
//       watchedStatus,
//     } = req.body;
//     if (!user || !rooms) res.status(403).send({
//       message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.'
//     })
//     const { email = 'gordey.moskvichev@gmail.com', name = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª', phone = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª', petArr = []} = user;

//     const successRooms = await getAvaliableRoom(rooms, start, end);

//     sendEmail(res, email, name, start, end);
//     sendManagerEmail(res, email, name, phone, petArr, successRooms, start, end, totalPrice, paidStatus, paymentMethod, transfer);
//     sendTGManagerEmail(res, email, name, phone, petArr, successRooms, start, end, totalPrice, paidStatus, paymentMethod, transfer);

//     getUser(user).then(res => {
//       if (res){
//         const { _id: userId, petArr } = res;

//         successRooms.map(async (room) => {
//           const { roomId, petsId } = room;
//           let pets = [];
//           petsId.map((pet) => {
//             const petId = String(petArr.filter(val => val.tmpId === pet)[0]._id);
//             const petServices = getServices(services, pet);

//             petInfo = {
//               petId,
//               services: petServices,
//             }
//             pets.push(petInfo);
//           })
//           const bookingData = {
//             start,
//             end,
//             room_id: roomId,
//             user_id: String(userId),
//             comment,
//             pets,
//             transfer,
//             status: 'willbe',
//             paid_status: paidStatus,
//             payment_method: paymentMethod,
//             total_price: totalPrice,
//             paid_price: paidPrice,
//             discount,
//             watched_status: watchedStatus,
//           }
//           const newBookingEvent = new BookingEvent(bookingData);
//           await newBookingEvent.save();
//         })
//       }
//     }).catch(err => {
//       res.status(303).send({
//         message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
//       });
//     })
//     res.status(200).send({
//       message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'
//     });
//   } catch (err) {
//     if (err.message === 'full') {
//       res.status(303).send({
//         message: '–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã',
//       });
//     } else {
//       res.status(500).send({
//         message: '–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
//       });
//     }
//   }
// };

// const getPayment = async (req, res) => {
//   try {
//     const { idempotenceKey, value, description, receipt } = req.body;
    
//     const createPayload = {
//       amount: {
//         value: value,
//         currency: 'RUB'
//       },
//       description: description,
//       // payment_method_data: {
//       //   type: 'bank_card'
//       // },
//       // payment_methods: [],
//       confirmation: {
//         type: 'embedded'
//       },
//       capture: true,

//       receipt: receipt
//     };
  
//     const payment = await checkout.createPayment(createPayload, idempotenceKey);

//     res.status(200).send({
//       message: 'OK',
//       token: payment.confirmation.confirmation_token
//     });
//   } catch (error) {
//     res.status(500).send({
//       message: '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
//     });
//   }
// }

// const sendEmail = (res, email, name, start, end) => {
//   const startDateString = new Date(start).toLocaleDateString();
// 	const endDateString = new Date(end).toLocaleDateString();

//   const body = {
//     from: process.env.EMAIL_USER,
//     to: email,
//     subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
//     html: `
//       <div style="background-color: #DAF2FF; text-align: center; margin: 10px 10px 0; border-radius: 20px; padding: 10px;">
//         <img src="https://res.cloudinary.com/zoonyanya/image/upload/v1667823873/emaillogo_mo0xsx.png" height="170px" width="200px"></img>
//         <div style="padding: 10px; background-color: #77EFA3; border-radius: 20px; margin: 10px; text-align: center;">
//           <span style="font-weight: 400;">–ù–æ–º–µ—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω</span>
//         </div>
//         <h2 style="margin-top: 0">üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}, —ç—Ç–æ –ó–æ–æ–Ω—è–Ω—è</h2>
//         <h3>–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–º–µ—Ä</h3>
//         <h3>–° ${startDateString} –ø–æ ${endDateString}</h3>
//         <p>
//           –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ.</br>
//         –ü–æ–ª–∏–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
//         </p>
//         <h3>–° –ª—é–±–æ–≤—å—é, –ó–æ–æ–Ω—è–Ω—è</h3>
//       </div>
//     `
//   };

//   const transporter = nodemailer.createTransport({
//     host: process.env.HOST,
//     service: process.env.SERVICE,
//     port: process.env.EMAIL_PORT,
//     secure: true,
//     auth: {
//       user: process.env.EMAIL_USER,
//       pass: process.env.EMAIL_PASS,
//     },
//   });

//   transporter.verify(function (err, success) {
//     if (err) {
//       res.status(403).send({
//         message: `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Email`,
//       });
//     } else {
//       console.log('Server is ready to take our messages');
//     }
//   });

//   transporter.sendMail(body, (err, data) => {
//     if (err) {
//       res.status(403).send({
//         message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ${err.message}`,
//       });
//     } else {
//       console.log('sendMail OK');
//     }
//   });
// };

// const sendTGManagerEmail = (res, userEmail, userName, userPhone, petArr = [], rooms = [], start, end, totalPrice, paidStatus, paymentMethod, transfer) => {
//   const startDateString = new Date(start).toLocaleDateString();
// 	const endDateString = new Date(end).toLocaleDateString();

//   let petsMsg = '';

//   if (rooms.length && petArr) {
//     rooms.map(room => {
//       const { petsId, roomType, roomName } = room;
//       const copy = petArr.filter(pet => petsId.includes(pet.tmpId))
//       petsMsg += `${roomType == 'comfort' ? '–ö–æ–º—Ñ–æ—Ä—Ç' : '–°–µ–º–µ–π–Ω—ã–π'} ${roomName}\n`
//       copy.map((pet, index) => {
//         if (pet.pettype) petsMsg += `${pet.pettype === 'dog' ? '–°–æ–±–∞–∫–∞' : '–ö–æ—à–∫–∞'}\n`
//         if (pet.petname) petsMsg += `–ò–º—è: ${pet.petname}\n`
//         if (pet.petsize) petsMsg += `–†–∞–∑–º–µ—Ä: ${PetSizes[pet.petsize]}\n`
//         if (pet.petsex) petsMsg += `–ü–æ–ª: ${PetSex[pet.petsex]}\n`
//         if (pet.petage) petsMsg += `–í–æ–∑—Ä–∞—Å—Ç: ${pet.petage}\n`
//         if (pet.petbreed) petsMsg += `–ü–æ—Ä–æ–¥–∞: ${pet.petbreed}\n`
//         if (pet.petpassport) petsMsg += `–í–µ—Ç –ü–∞—Å–ø–æ—Ä—Ç: ${pet.petpassport ? '–ï—Å—Ç—å' : '–ù–ï–¢'}\n`
//         if (pet.petsterilization) petsMsg += `–°—Ç–µ—Ä–µ–ª–∏–∑–∞—Ü–∏—è: ${pet.petsterilization ? '–ï—Å—Ç—å' : '–ù–ï–¢'}\n`
//         if (pet.petbgraftdate) petsMsg += `–î–∞—Ç–∞ –ö–ü: ${pet.petbgraftdate}\n`
//         if (pet.petcomment) petsMsg += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${pet.petcomment}\n`
//         if (index != copy.length - 1) petsMsg += `+\n`;
//       })
//       petsMsg += `\n`;
//     })
//   }

//   const message = `–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ!
// –î–∞—Ç—ã: ${startDateString} - ${endDateString}
// –¶–µ–Ω–∞: ${totalPrice} ‚ÇΩ
// –°—Ç–∞—Ç—É—Å: ${paidStatus == 'paid' ? '–û–ø–ª–∞—á–µ–Ω–æ' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}
// –û–ø–ª–∞—Ç–∞: ${paymentMethod == 'card' ? '–ö–∞—Ä—Ç–æ–π –æ–Ω–∞–ª–∞–π–Ω' : '–ü—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏'}
// ${transfer?.transferStatus ? 
//     `–¢—Ä–∞–Ω—Å—Ñ–µ—Ä ${transfer?.transferWay ? DeliveryTitles[transfer.transferWay] : ''}
//     –ê–¥—Ä–µ—Å: ${transfer?.transferAddress}
//     –¶–µ–Ω–∞: ${transfer?.transferPrice} ‚ÇΩ
//     –í—Ä–µ–º—è: ${transfer?.transferTime}
//   ` : ''}
// –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}.
// Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userEmail}.
// –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userPhone}.
// TG: https://t.me/+${userPhone}

// ${petsMsg}
//   `;

//   bot.sendMessage(
//     process.env.BOT_CHAT_ID,
//     message
//   ).catch(e => {
//     bot.sendMessage(msg.chat.id,`Oops! An error has occured. Try again`);
//   });
// }


// const sendManagerEmail = (res, userEmail, userName, userPhone, petArr = [], rooms = [], start, end, totalPrice, paidStatus, paymentMethod, transfer) => {
//   const startDateString = new Date(start).toLocaleDateString();
// 	const endDateString = new Date(end).toLocaleDateString();

//   let petsMsg = '';

//   if (rooms.length && petArr) {
//     rooms.map(room => {
//       const { petsId, roomType, roomName } = room;
//       const copy = petArr.filter(pet => petsId.includes(pet.tmpId))
//       petsMsg += `<h4>${roomType == 'comfort' ? '–ö–æ–º—Ñ–æ—Ä—Ç' : '–°–µ–º–µ–π–Ω—ã–π'} ${roomName}</h4>`
//       copy.map(pet => {
//         if (pet.pettype) petsMsg += `<p>${pet.pettype === 'dog' ? '–°–æ–±–∞–∫–∞' : '–ö–æ—à–∫–∞'}</p>`
//         if (pet.petname) petsMsg += `<p>–ò–º—è: ${pet.petname}</p>`
//         if (pet.petsize) petsMsg += `<p>–†–∞–∑–º–µ—Ä: ${PetSizes[pet.petsize]}</p>`
//         if (pet.petsex) petsMsg += `<p>–ü–æ–ª: ${PetSex[pet.petsex]}</p>`
//         if (pet.petage) petsMsg += `<p>–í–æ–∑—Ä–∞—Å—Ç: ${pet.petage}</p>`
//         if (pet.petbreed) petsMsg += `<p>–ü–æ—Ä–æ–¥–∞: ${pet.petbreed}</p>`
//         if (pet.petpassport) petsMsg += `<p>–í–µ—Ç –ü–∞—Å–ø–æ—Ä—Ç: ${pet.petpassport ? '–ï—Å—Ç—å' : '–ù–ï–¢'}</p>`
//         if (pet.petsterilization) petsMsg += `<p>–°—Ç–µ—Ä–µ–ª–∏–∑–∞—Ü–∏—è: ${pet.petsterilization ? '–ï—Å—Ç—å' : '–ù–ï–¢'}</p>`
//         if (pet.petbgraftdate) petsMsg += `<p>–î–∞—Ç–∞ –ö–ü: ${pet.petbgraftdate}</p>`
//         if (pet.petcomment) petsMsg += `<p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${pet.petcomment}</p>`
//       })
//       petsMsg += `<p>--------------------------</p>`;
//     })
//   }

//   const body = {
//     from: process.env.EMAIL_USER,
//     to: process.env.MANAGER_EMAIL,
//     subject: '–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
//     html: `<h2>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ!</h2>
//     <h3>–î–∞—Ç—ã: ${startDateString} - ${endDateString}</h3>
//     <h3>–¶–µ–Ω–∞: ${totalPrice} ‚ÇΩ</h3>
//     <h3>–°—Ç–∞—Ç—É—Å: ${paidStatus == 'paid' ? '–û–ø–ª–∞—á–µ–Ω–æ' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}</h3>
//     <h3>–û–ø–ª–∞—Ç–∞: ${paymentMethod == 'card' ? '–ö–∞—Ä—Ç–æ–π –æ–Ω–∞–ª–∞–π–Ω' : '–ü—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏'}</h3>
//     ${transfer?.transferStatus ? 
//       `<h3>–¢—Ä–∞–Ω—Å—Ñ–µ—Ä ${transfer?.transferWay ? DeliveryTitles[transfer.transferWay] : ''}</h3>
//       <h4>–ê–¥—Ä–µ—Å: ${transfer?.transferAddress}</h4>
//       <h4>–¶–µ–Ω–∞: ${transfer?.transferPrice} ‚ÇΩ</h4>
//       <h4>–í—Ä–µ–º—è: ${transfer?.transferTime}</h4>
//     ` : ''}
//     <h4>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <strong>${userName}</strong>.</h4>
//     <h4>Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <strong>${userEmail}</strong>.</h4>
//     <h4>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <strong>${userPhone}</strong>.</h4>
//     <h3>–ü–∏—Ç–æ–º—Ü—ã</h3>
//     ${petsMsg}
//     `,
//   };

//   const transporter = nodemailer.createTransport({
//     host: process.env.HOST,
//     service: process.env.SERVICE,
//     port: process.env.EMAIL_PORT,
//     secure: true,
//     auth: {
//       user: process.env.EMAIL_USER,
//       pass: process.env.EMAIL_PASS,
//     },
//   });

//   transporter.verify(function (err, success) {
//     if (err) {
//       res.status(403).send({
//         message: `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Email`,
//       });
//     } else {
//       console.log('Server is ready to take our messages');
//     }
//   });

//   transporter.sendMail(body, (err, data) => {
//     if (err) {
//       res.status(403).send({
//         message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ${err.message}`,
//       });
//     } else {
//       console.log('sendMail OK');
//     }
//   });
// };

// const addFrontendGroomingEvent = async (req, res) => {
//   try {
//     const {
//       name,
//       phone,
//       email,
//       date,
// 			pettype,
// 			petbreed,
//       serviceData,
//       totalPrice,
//     } = req.body;
//     sendGroomingEmail(res, email, name, date, serviceData);
//     sendManagerGroomingEmail(res, name, email, phone, pettype, petbreed, date, serviceData, totalPrice);
//     sendTGManagerGrooming(res, name, email, phone, pettype, petbreed, date, serviceData, totalPrice);

//     res.status(200).send({
//       message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'
//     });
//   } catch (err) {
//     res.status(500).send({
//       message: '–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
//     });
//   }
// }

// const sendGroomingEmail = (res, email, name, date, serviceData) => {
//   const dateString = new Date(date).toLocaleDateString();
//   let serviceStr = '';
//   serviceData.map(service => {
//     serviceStr += `<h4>${service.title} ${service.price}‚ÇΩ</h4>`
//   })

//   const body = {
//     from: process.env.EMAIL_USER,
//     to: email,
//     subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
//     html: `
//       <div style="background-color: #DAF2FF; text-align: center; margin: 10px 10px 0; border-radius: 20px; padding: 10px;">
//         <img src="https://res.cloudinary.com/zoonyanya/image/upload/v1667823873/emaillogo_mo0xsx.png" height="170px" width="200px"></img>
//         <div style="padding: 10px; background-color: #77EFA3; border-radius: 20px; margin: 10px; text-align: center;">
//           <span style="font-weight: 400;">–£—Å–ª—É–≥–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞</span>
//         </div>
//         <h2 style="margin-top: 0">üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}, —ç—Ç–æ –ó–æ–æ–Ω—è–Ω—è</h2>
//         <h3>–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —É—Å–ª—É–≥—É –≥—Ä—É–º–∏–Ω–≥–∞</h3>
//         ${serviceStr}
//         <h3>–î–∞—Ç–∞: ${dateString}</h3>
//         <p>
//           –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ.</br>
//         –ü–æ–ª–∏–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
//         </p>
//         <h3>–° –ª—é–±–æ–≤—å—é, –ó–æ–æ–Ω—è–Ω—è</h3>
//       </div>
//     `
//   };

//   const transporter = nodemailer.createTransport({
//     host: process.env.HOST,
//     service: process.env.SERVICE,
//     port: process.env.EMAIL_PORT,
//     secure: true,
//     auth: {
//       user: process.env.EMAIL_USER,
//       pass: process.env.EMAIL_PASS,
//     },
//   });

//   transporter.verify(function (err, success) {
//     if (err) {
//       res.status(403).send({
//         message: `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Email`,
//       });
//     } else {
//       console.log('Server is ready to take our messages');
//     }
//   });

//   transporter.sendMail(body, (err, data) => {
//     if (err) {
//       res.status(403).send({
//         message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ${err.message}`,
//       });
//     } else {
//       console.log('sendMail OK');
//     }
//   });
// };

// const sendManagerGroomingEmail = (res, name, email, phone, pettype, petbreed, date, serviceData, totalPrice) => {
//   const dateString = new Date(date).toLocaleDateString();

//   let serviceStr = '';
//   serviceData.map(service => {
//     serviceStr += `<h4>${service.title} ${service.price}‚ÇΩ</h4>`
//   })

//   const body = {
//     from: process.env.EMAIL_USER,
//     to: process.env.MANAGER_EMAIL,
//     subject: '–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ì—Ä—É–º–∏–Ω–≥–∞',
//     html: `<h2>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ì—Ä—É–º–∏–Ω–≥–∞ –Ω–∞ —Å–∞–π—Ç–µ!</h2>
//     <h3>–î–∞—Ç–∞: ${dateString}</h3>
//     <h3>–¶–µ–Ω–∞: ${totalPrice} ‚ÇΩ</h3>
//     <h4>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <strong>${name}</strong>.</h4>
//     <h4>Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <strong>${email}</strong>.</h4>
//     <h4>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <strong>${phone}</strong>.</h4>
//     <h3>–ü–∏—Ç–æ–º—Ü–µ—Ü</h3>
//     <h4>${pettype == 'dog' ? '–°–æ–±–∞–∫–∞' : '–ö–æ—à–∫–∞'}</h4>
//     <h4>–ü–æ—Ä–æ–¥–∞: ${petbreed}</h4>
//     ${serviceStr}
//     `,
//   };

//   const transporter = nodemailer.createTransport({
//     host: process.env.HOST,
//     service: process.env.SERVICE,
//     port: process.env.EMAIL_PORT,
//     secure: true,
//     auth: {
//       user: process.env.EMAIL_USER,
//       pass: process.env.EMAIL_PASS,
//     },
//   });

//   transporter.verify(function (err, success) {
//     if (err) {
//       res.status(403).send({
//         message: `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Email`,
//       });
//     } else {
//       console.log('Server is ready to take our messages');
//     }
//   });

//   transporter.sendMail(body, (err, data) => {
//     if (err) {
//       res.status(403).send({
//         message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ${err.message}`,
//       });
//     } else {
//       console.log('sendMail OK');
//     }
//   });
// };

// const sendTGManagerGrooming = (res, name, email, phone, pettype, petbreed, date, serviceData, totalPrice) => {
//   const dateString = new Date(date).toLocaleDateString();

//   let serviceStr = '';
//   serviceData.map(service => {
//     serviceStr += `${service.title} ${service.price}‚ÇΩ \n`
//   })

//   const message = `–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ì—Ä—É–º–∏–Ω–≥–∞ –Ω–∞ —Å–∞–π—Ç–µ!
// –î–∞—Ç–∞: ${dateString}
// –¶–µ–Ω–∞: ${totalPrice} ‚ÇΩ
// –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${name}.
// Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}.
// –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${phone}.
// TG: https://t.me/+${phone}

// ${serviceStr}

// –ü–∏—Ç–æ–º—Ü–µ—Ü
// ${pettype == 'dog' ? '–°–æ–±–∞–∫–∞' : '–ö–æ—à–∫–∞'}
// –ü–æ—Ä–æ–¥–∞: ${petbreed}
//   `;

//   bot.sendMessage(
//     process.env.BOT_CHAT_ID,
//     message
//   ).catch(e => {
//     bot.sendMessage(msg.chat.id,`Oops! An error has occured. Try again`);
//   });
// }

// module.exports = {
//   addFrontendBookingEvent,
//   getPayment,
//   addFrontendGroomingEvent,
// };
